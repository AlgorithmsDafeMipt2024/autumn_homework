
#include <gtest/gtest.h>

#include "dijkstra.hpp"

TEST(unorient_graph, Test_1) {
  Graph g(6, {
                 {{0, 1}, 7},
                 {{1, 0}, 7},
                 {{0, 2}, 9},
                 {{2, 0}, 9},
                 {{1, 2}, 10},
                 {{2, 1}, 10},
                 {{0, 5}, 14},
                 {{5, 0}, 14},
                 {{2, 5}, 2},
                 {{5, 2}, 2},
                 {{2, 3}, 11},
                 {{3, 2}, 11},
                 {{1, 3}, 15},
                 {{3, 1}, 15},
                 {{3, 4}, 6},
                 {{4, 3}, 6},
                 {{5, 4}, 9},
                 {{4, 5}, 9},
             });
  bool const passed = (std::map<int, double>(
                     {{0, 0}, {1, 7}, {2, 9}, {3, 20}, {4, 20}, {5, 11}}) ==
                 dijkstra(g, 0));

  ASSERT_EQ(passed, true);
}

TEST(unorient_graph, Test_2) {
  Graph g(6, {
                 {{0, 1}, 7},
                 {{1, 0}, 7},
                 {{0, 2}, 9},
                 {{2, 0}, 9},
                 {{1, 2}, 10},
                 {{2, 1}, 10},
                 {{0, 5}, 14},
                 {{5, 0}, 14},
                 {{2, 5}, 2},
                 {{5, 2}, 2},
                 {{2, 3}, 11},
                 {{3, 2}, 11},
                 {{1, 3}, 15},
                 {{3, 1}, 15},
                 {{3, 4}, 6},
                 {{4, 3}, 6},
                 {{5, 4}, 9},
                 {{4, 5}, 9},
             });
  bool const passed = (std::map<int, double>(
                     {{0, 7}, {1, 0}, {2, 10}, {3, 15}, {4, 21}, {5, 12}}) ==
                 dijkstra(g, 1));

  ASSERT_EQ(passed, true);
}

TEST(unorient_graph, Test_3) {
  Graph g(6, {
                 {{0, 1}, 7},
                 {{1, 0}, 7},
                 {{0, 2}, 9},
                 {{2, 0}, 9},
                 {{1, 2}, 10},
                 {{2, 1}, 10},
                 {{0, 5}, 14},
                 {{5, 0}, 14},
                 {{2, 5}, 2},
                 {{5, 2}, 2},
                 {{2, 3}, 11},
                 {{3, 2}, 11},
                 {{1, 3}, 15},
                 {{3, 1}, 15},
                 {{3, 4}, 6},
                 {{4, 3}, 6},
                 {{5, 4}, 9},
                 {{4, 5}, 9},
             });
  bool const passed = (std::map<int, double>(
                     {{0, 9}, {1, 10}, {2, 0}, {3, 11}, {4, 11}, {5, 2}}) ==
                 dijkstra(g, 2));

  ASSERT_EQ(passed, true);
}

TEST(unorient_graph, Test_4) {
  Graph g(6, {
                 {{0, 1}, 7},
                 {{1, 0}, 7},
                 {{0, 2}, 9},
                 {{2, 0}, 9},
                 {{1, 2}, 10},
                 {{2, 1}, 10},
                 {{0, 5}, 14},
                 {{5, 0}, 14},
                 {{2, 5}, 2},
                 {{5, 2}, 2},
                 {{2, 3}, 11},
                 {{3, 2}, 11},
                 {{1, 3}, 15},
                 {{3, 1}, 15},
                 {{3, 4}, 6},
                 {{4, 3}, 6},
                 {{5, 4}, 9},
                 {{4, 5}, 9},
             });
  bool const passed = (std::map<int, double>(
                     {{0, 20}, {1, 15}, {2, 11}, {3, 0}, {4, 6}, {5, 13}}) ==
                 dijkstra(g, 3));

  ASSERT_EQ(passed, true);
}

TEST(unorient_graph, Test_5) {
  Graph g(6, {
                 {{0, 1}, 7},
                 {{1, 0}, 7},
                 {{0, 2}, 9},
                 {{2, 0}, 9},
                 {{1, 2}, 10},
                 {{2, 1}, 10},
                 {{0, 5}, 14},
                 {{5, 0}, 14},
                 {{2, 5}, 2},
                 {{5, 2}, 2},
                 {{2, 3}, 11},
                 {{3, 2}, 11},
                 {{1, 3}, 15},
                 {{3, 1}, 15},
                 {{3, 4}, 6},
                 {{4, 3}, 6},
                 {{5, 4}, 9},
                 {{4, 5}, 9},
             });
  bool const passed = (std::map<int, double>(
                     {{0, 20}, {1, 21}, {2, 11}, {3, 6}, {4, 0}, {5, 9}}) ==
                 dijkstra(g, 4));

  ASSERT_EQ(passed, true);
}

TEST(unorient_graph, Test_6) {
  Graph g(6, {
                 {{0, 1}, 7},
                 {{1, 0}, 7},
                 {{0, 2}, 9},
                 {{2, 0}, 9},
                 {{1, 2}, 10},
                 {{2, 1}, 10},
                 {{0, 5}, 14},
                 {{5, 0}, 14},
                 {{2, 5}, 2},
                 {{5, 2}, 2},
                 {{2, 3}, 11},
                 {{3, 2}, 11},
                 {{1, 3}, 15},
                 {{3, 1}, 15},
                 {{3, 4}, 6},
                 {{4, 3}, 6},
                 {{5, 4}, 9},
                 {{4, 5}, 9},
             });
  bool const passed = (std::map<int, double>(
                     {{0, 11}, {1, 12}, {2, 2}, {3, 13}, {4, 9}, {5, 0}}) ==
                 dijkstra(g, 5));

  ASSERT_EQ(passed, true);
}

TEST(orient_graph, Test_1) {
  Graph g(5, {
                 {{1, 0}, 34},
                 {{0, 2}, 6},
                 {{2, 0}, 7},
                 {{2, 1}, 23},
                 {{3, 1}, 29},
                 {{1, 4}, 37},
                 {{0, 4}, 25},
                 {{0, 3}, 122},
                 {{4, 2}, 11},
             });
  bool const passed =
      (std::map<int, double>({{0, 0}, {1, 29}, {2, 6}, {3, 122}, {4, 25}}) ==
       dijkstra(g, 0));

  ASSERT_EQ(passed, true);
}

TEST(orient_graph, Test_2) {
  Graph g(5, {
                 {{1, 0}, 34},
                 {{0, 2}, 6},
                 {{2, 0}, 7},
                 {{2, 1}, 23},
                 {{3, 1}, 29},
                 {{1, 4}, 37},
                 {{0, 4}, 25},
                 {{0, 3}, 122},
                 {{4, 2}, 11},
             });
  bool const passed =
      (std::map<int, double>({{0, 34}, {1, 0}, {2, 40}, {3, 156}, {4, 37}}) ==
       dijkstra(g, 1));

  ASSERT_EQ(passed, true);
}

TEST(orient_graph, Test_3) {
  Graph g(5, {
                 {{1, 0}, 34},
                 {{0, 2}, 6},
                 {{2, 0}, 7},
                 {{2, 1}, 23},
                 {{3, 1}, 29},
                 {{1, 4}, 37},
                 {{0, 4}, 25},
                 {{0, 3}, 122},
                 {{4, 2}, 11},
             });
  bool const passed =
      (std::map<int, double>({{0, 63}, {1, 29}, {2, 69}, {3, 0}, {4, 66}}) ==
       dijkstra(g, 3));

  ASSERT_EQ(passed, true);
}